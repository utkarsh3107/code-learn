package interview.capillary;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class CoolNumbersFinal2 {
	private static int[] nums;

	static{
		nums = getArray();
	}
	
	private static int binarySearch(int[] arr, int m, int n, int target) {
		if (m == n)
			return m;

		if ((n - m) == 1 )
			return arr[m] >= target ? m : n;
		
		int mid = (m + n) / 2;

		if (arr[mid] == target)
			return mid;

		if (arr[mid] > target)
			return binarySearch(arr, m, mid, target);
		else
			return binarySearch(arr, mid, n, target);
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		
		int T = Integer.parseInt(br.readLine());
		
		while(T-- > 0){
			String[] line = br.readLine().split(" ");
			int l = Integer.parseInt(line[0]);
			int r = Integer.parseInt(line[1]);
			long sum = 0;
			for(int i = l;i<=r;){
				int val = nums[binarySearch(nums, 0, nums.length-1, i)];
				if(val > r){
					sum += (r - (i - 1))* val;
					break;
				}
				sum += (val -i)*val + val;
				i = val +1;
			}
			System.out.println(sum);
		}
	}
	
	private static int[] getArray(){
		int nums[] = {2, 5, 22, 25, 52, 55, 222, 225, 252, 255, 522, 525, 552, 555, 2222, 2225, 2252, 2255, 2522, 2525, 2552, 2555, 5222, 5225, 5252, 5255, 5522, 5525, 5552, 5555, 22222, 22225, 22252, 22255, 22522, 22525, 22552, 22555, 25222, 25225, 25252, 25255, 25522, 25525, 25552, 25555, 52222, 52225, 52252, 52255, 52522, 52525, 52552, 52555, 55222, 55225, 55252, 55255, 55522, 55525, 55552, 55555, 222222, 222225, 222252, 222255, 222522, 222525, 222552, 222555, 225222, 225225, 225252, 225255, 225522, 225525, 225552, 225555, 252222, 252225, 252252, 252255, 252522, 252525, 252552, 252555, 255222, 255225, 255252, 255255, 255522, 255525, 255552, 255555, 522222, 522225, 522252, 522255, 522522, 522525, 522552, 522555, 525222, 525225, 525252, 525255, 525522, 525525, 525552, 525555, 552222, 552225, 552252, 552255, 552522, 552525, 552552, 552555, 555222, 555225, 555252, 555255, 555522, 555525, 555552, 555555, 2222222, 2222225, 2222252, 2222255, 2222522, 2222525, 2222552, 2222555, 2225222, 2225225, 2225252, 2225255, 2225522, 2225525, 2225552, 2225555, 2252222, 2252225, 2252252, 2252255, 2252522, 2252525, 2252552, 2252555, 2255222, 2255225, 2255252, 2255255, 2255522, 2255525, 2255552, 2255555, 2522222, 2522225, 2522252, 2522255, 2522522, 2522525, 2522552, 2522555, 2525222, 2525225, 2525252, 2525255, 2525522, 2525525, 2525552, 2525555, 2552222, 2552225, 2552252, 2552255, 2552522, 2552525, 2552552, 2552555, 2555222, 2555225, 2555252, 2555255, 2555522, 2555525, 2555552, 2555555, 5222222, 5222225, 5222252, 5222255, 5222522, 5222525, 5222552, 5222555, 5225222, 5225225, 5225252, 5225255, 5225522, 5225525, 5225552, 5225555, 5252222, 5252225, 5252252, 5252255, 5252522, 5252525, 5252552, 5252555, 5255222, 5255225, 5255252, 5255255, 5255522, 5255525, 5255552, 5255555, 5522222, 5522225, 5522252, 5522255, 5522522, 5522525, 5522552, 5522555, 5525222, 5525225, 5525252, 5525255, 5525522, 5525525, 5525552, 5525555, 5552222, 5552225, 5552252, 5552255, 5552522, 5552525, 5552552, 5552555, 5555222, 5555225, 5555252, 5555255, 5555522, 5555525, 5555552, 5555555, 22222222, 22222225, 22222252, 22222255, 22222522, 22222525, 22222552, 22222555, 22225222, 22225225, 22225252, 22225255, 22225522, 22225525, 22225552, 22225555, 22252222, 22252225, 22252252, 22252255, 22252522, 22252525, 22252552, 22252555, 22255222, 22255225, 22255252, 22255255, 22255522, 22255525, 22255552, 22255555, 22522222, 22522225, 22522252, 22522255, 22522522, 22522525, 22522552, 22522555, 22525222, 22525225, 22525252, 22525255, 22525522, 22525525, 22525552, 22525555, 22552222, 22552225, 22552252, 22552255, 22552522, 22552525, 22552552, 22552555, 22555222, 22555225, 22555252, 22555255, 22555522, 22555525, 22555552, 22555555, 25222222, 25222225, 25222252, 25222255, 25222522, 25222525, 25222552, 25222555, 25225222, 25225225, 25225252, 25225255, 25225522, 25225525, 25225552, 25225555, 25252222, 25252225, 25252252, 25252255, 25252522, 25252525, 25252552, 25252555, 25255222, 25255225, 25255252, 25255255, 25255522, 25255525, 25255552, 25255555, 25522222, 25522225, 25522252, 25522255, 25522522, 25522525, 25522552, 25522555, 25525222, 25525225, 25525252, 25525255, 25525522, 25525525, 25525552, 25525555, 25552222, 25552225, 25552252, 25552255, 25552522, 25552525, 25552552, 25552555, 25555222, 25555225, 25555252, 25555255, 25555522, 25555525, 25555552, 25555555, 52222222, 52222225, 52222252, 52222255, 52222522, 52222525, 52222552, 52222555, 52225222, 52225225, 52225252, 52225255, 52225522, 52225525, 52225552, 52225555, 52252222, 52252225, 52252252, 52252255, 52252522, 52252525, 52252552, 52252555, 52255222, 52255225, 52255252, 52255255, 52255522, 52255525, 52255552, 52255555, 52522222, 52522225, 52522252, 52522255, 52522522, 52522525, 52522552, 52522555, 52525222, 52525225, 52525252, 52525255, 52525522, 52525525, 52525552, 52525555, 52552222, 52552225, 52552252, 52552255, 52552522, 52552525, 52552552, 52552555, 52555222, 52555225, 52555252, 52555255, 52555522, 52555525, 52555552, 52555555, 55222222, 55222225, 55222252, 55222255, 55222522, 55222525, 55222552, 55222555, 55225222, 55225225, 55225252, 55225255, 55225522, 55225525, 55225552, 55225555, 55252222, 55252225, 55252252, 55252255, 55252522, 55252525, 55252552, 55252555, 55255222, 55255225, 55255252, 55255255, 55255522, 55255525, 55255552, 55255555, 55522222, 55522225, 55522252, 55522255, 55522522, 55522525, 55522552, 55522555, 55525222, 55525225, 55525252, 55525255, 55525522, 55525525, 55525552, 55525555, 55552222, 55552225, 55552252, 55552255, 55552522, 55552525, 55552552, 55552555, 55555222, 55555225, 55555252, 55555255, 55555522, 55555525, 55555552, 55555555};
		return nums;
	}
}
